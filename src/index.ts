import { AccountBalanceQuery, AccountCreateTransaction, Client, Hbar, PrivateKey, TokenCreateTransaction, TokenMintTransaction } from '@hashgraph/sdk';
import { app, BrowserWindow, ipcMain } from 'electron';
import * as remoteMain from '@electron/remote/main';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

interface ISuite {
  id: string;
  suite: (client: any) => void;
}

const testSuites: any = {
  "AccountCreateTransaction": async (client: Client) => {
    const newAccountPrivateKey = PrivateKey.generateED25519(); 
    const newAccountPublicKey = newAccountPrivateKey.publicKey;
    console.log(newAccountPrivateKey, newAccountPublicKey);
    await new AccountCreateTransaction()
      .setKey(newAccountPublicKey)
      .setInitialBalance(Hbar.fromTinybars(10))
      .execute(client);
  },
  "AccountBalanceQuery": async (client: Client) => {
    const newAccountPrivateKey = PrivateKey.generateED25519(); 
    const newAccountPublicKey = newAccountPrivateKey.publicKey;
    console.log(newAccountPrivateKey, newAccountPublicKey);
    await new AccountBalanceQuery()
      .setAccountId(client.operatorAccountId)
      .execute(client);
  },
  "TokenCreateTransaction": async (client: Client) => {
    throw new Error("Test ERROR TokenCreateTransaction");
    await new TokenCreateTransaction()
      .setTokenName('Test')
      .setTokenSymbol('T')
      .setTreasuryAccountId(client.operatorAccountId)
      .setDecimals(2)
      .setInitialSupply(1)
      .setTokenMemo('Test')
      .execute(client)
  },
  "TokenMintTransaction": async (client: Client) => {
    const tokenTx = await new TokenCreateTransaction()
      .setTokenName('Test')
      .setTokenSymbol('T')
      .setTreasuryAccountId(client.operatorAccountId)
      .setDecimals(2)
      .setInitialSupply(1)
      .setTokenMemo('Test')
      .execute(client);
    const recepient = await tokenTx.getReceipt(client);
    await new TokenMintTransaction()
      .setTokenId(recepient.tokenId)
      .setAmount(1)
      .execute(client)
  }
}

const createWindow = (): void => {
  remoteMain.initialize();
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 700,
    width: 1000,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: true,
    },
    autoHideMenuBar: true,
    icon: __dirname + '/favicon.png'
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  remoteMain.enable(mainWindow.webContents);
  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on('start-tests', async (event, arg) => {
  try {
    console.log(arg.account, arg.key, arg.testIds);
    if (!arg.account || !arg.key || !arg.testIds) {
      throw new Error('Invalid Hedera Credentials');
    }
    const client = Client.forTestnet();
    client.setOperator(arg.account, arg.key);
    for (let testId of arg.testIds as string[]) {
      try {
        await testSuites[testId](client);
        event.sender.send("test-result", {
          testId,
          result: true
        });
        await new Promise(r => setTimeout(r, 2000));
      } catch (error) {
        event.sender.send("test-result", {
          testId,
          result: false,
          error
        });
        throw error;
      }
    }
  }
  catch (error) {
    console.log(error)
    event.sender.send("start-tests-other-error", error);
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
